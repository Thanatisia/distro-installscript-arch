#!/bin/env bash

# A all-in-one setup wrapper script initially created for my (Arch)Linux install scripts 
# that streamlines the download, configuration and customization and installation process without requiring you to
# manually download the scripts
#
# Although it is designed to be modular, portable and customizable Out-of-the-Box (OOTB).
# You can reuse this as a template as an alternative 'makefile' for installation purposes
#
# -- DISCLAIMER : This is still a design and a W.I.P, please do a testrun in a virtual machine before running in your production
#  At the moment, the makefile is optimized only to be used by an ArchLinux system due to the package manager.
#  Cross-Package manager support is in the works.
#
# :: TODO
# 	- Add/Test support for apt and emerge into the switch case 
#
# :: Setup
#   chmod +x install
#
# :: Usage
#	install about 				: Displays the project information
#	install backup				: Backup target system
# 	install build 				: To download all files and run the full customization and configuration process
#	install checkdependencies 	: Check if dependencies are installed
#	install clean	 			: Clean and removes all temporary files
# 	install configure 			: To configure your currently found files
# 	install download 			: To download the files only
#	install help 				: Prints this help menu
# 	install install			    : Runs the script in the correct order and install the program; Please run this in sudo
#	install prepare_all		    : Does an automated downloaded and setting up of all files required (excluding backup) for use.
#   install select_script       : To select a base install script that you would like to use to install
#	install setup				: Prepare system for script use
#
# :: Customization and Configuration
#   --- Folders
#   $PWD/distro-installscript-arch/scripts : Store your custom install script here and set DISTRO_INSTALLSCRIPT_ARCH_FILENAME to the file name if you dont wish to use the select_script function
#
#   --- Environment Variables
#   DISTRO_INSTALLSCRIPT_ARCH_FILENAME : Edit this to set the install script custom filename you wish to use (NOTE: Please ensure that this is found in )

#============
# Variables
#============
PROJ_NAME="distro-installscript-arch" 	# Project Name
PROJ_AUTHOR="Thanatisia"
PROJ_REPO="https://github.com/$PROJ_AUTHOR/$PROJ_NAME"
PROJ_FLDR="$PWD/$PROJ_NAME"      		# Project Folder
BASE="$PROJ_FLDR"
PROJ_SCRIPTS="$BASE/scripts"
PROJ_TMP="$BASE/tmp"
DISTRO_BASE=$(egrep '^(VERSION|NAME)=' /etc/os-release)
BASE_DISTRO_INSTALL_SCRIPT_PATH="https://raw.githubusercontent.com/Thanatisia/distro-installscript-arch/main/src/base-installation"
BASE_DISTRO_INSTALL_SCRIPT_FILE="$1"
dependencies=(build-devel make git curl arch-install-scripts)

# Constants
declare -A help_opts=(
    [about]="Displays the project information"
    [backup]="Backup target system"
    [build]="To download all files and run the full customization and configuration process"
    [checkdependencies]="Check if dependences are installed"
    [clean]="Clean and removes all temporary files"
    [configure]="To configure your currently found files"
    [download]="To download the files only"
    [help]="Prints this help menu"
    [install]="Runs the script in the correct order and install the program; Please run this in sudo"
    [prepare_all]="Does an automated downloaded and setting up of all files required (excluding backup) for use"
    [select_script]="To select a base install script that you would like to use to install"
    [setup]="Prepare system for script use"
)


#==========
# Command
# Alias
#==========
CURL="curl --create-dirs"
MKDIR="mkdir -p"
LN="ln -vsf" 	# Symbolic Link Files
LNDIR="ln -vs" 	# Symbolic Link Directory
case "$DISTRO_BASE" in
	"Arch Linux")
		PKGMGR="sudo pacman"
		PKGINSTALL="$PKGMGR --needed -S"
		PKGUPDATE="$PKGMGR -Syu"
		PKGBACKUP="$PKGMGR -Qnq"
		PKGLIST="$PKGMGR -Qi"
		;;
	"Debian GNU/Linux")
		PKGMGR="sudo apt"
		PKGINSTALL="$PKGRMGR install"
		PKGUPDATE="$PKGMGR update && $PKGMGR upgrade"
		# TBC
		PKGBACKUP="$PKGMGR list"
		PKGLIST="$PKGMGR list"
        ;;
	*)
		;;
esac
TAR_COMPRESS="sudo tar -cvzf"
TAR_EXTRACT="sudo tar -xvzf"

#===========
# Functions
#===========

Format()
{
    : "
    Format the output message you wish to display
    "
    FG="\e[1;31m"
    echo -e "\t${FG}$1"
}

about()
{
	## Displays the project information
	echo -e "Program Name : $PROJ_NAME \n"
		\ "Author : $PROJ_AUTHOR \n"
		\ "Repository URL : $PROJ_REPO \n"
}

backup()
{
	## Backup target system before install (OPTIONAL)
	echo -e "(S) Backup Start"

	# Test if directory exists
	# else - create
    if [[ ! -d $BASE/backup ]]; then 
	    # If directory doesnt exist
        echo -e "(+) Backup Directory doesnt exist, making Backup Directory..." 
		$MKDIR $BASE/backup
    fi

	# Backup Packages in package manager
	echo -e "(+) Backup Packages in Package Manager"
	$PKGBACKUP > $BASE/backup/pkglist

	# Backup Root excluding home folder to store into home folder
	echo -e "(+) Backup Root directory excluding home folder"
	$TAR_COMPRESS $BASE/backup/files/system-backup.tar.gz
		\ / --exclude /home  

	# Backup Home directory into general /home
	# and move into backup directory after creation
	echo -e "(+) Backup Home directory to /home for temporary storage"
	$TAR_COMPRESS /home/home-backup.tar.gz 
		\ $HOME

	echo -e "(+) Moving Home backup to Backup directory"
	echo -e "(1) Moving"
	mv /home/home-backup.tar.gz $BASE/backup/files/system-backup.tar.gz	

	# Done
	echo -e "(D) Backup complete."
}

checksysinfo()
{
	## Check System Information
	echo -e "Distribution : $DISTRO_BASE"
}

checkdependencies()
{
	## Check if dependencies are installed
	for pkg in ${dependencies[@]}; do
        # Output package specs to check if available and dump the data
        $PKGLIST $pkg > /dev/null 

        # Check if successful
        # 0 : Success
        # 1 : Error
		if [[ "$?" == "0"  ]]; then
			echo -e "$pkg is installed"
		else
			echo -e "$pkg is not installed."
		fi
	done
}

select_script()
{
    : "
    Specify script to use
    "
    # Get Base Distro File
    read -p "Select Script { (a) : installer-ux.min.sh | (b) : installer-manual.sh | (Default) : Custom Filename }: " BASE_DISTRO_INSTALL_SCRIPT_FILE 
    case "$BASE_DISTRO_INSTALL_SCRIPT_FILE" in
        "a")
            BASE_DISTRO_INSTALL_SCRIPT_FILE="installer-ux.min.sh"
            ;;
        "b")
            BASE_DISTRO_INSTALL_SCRIPT_FILE="installer-manual.sh"
            ;;
        *)
            # Custom file name
            read -p "Indicate custom file name (NOTE: Ensure that this file is found in $BASE_DISTRO_INSTALL_SCRIPT_PATH): " BASE_DISTRO_INSTALL_SCRIPT_FILE
            ;;
    esac

    # Write selected file into Environment Variable for later use
    echo "export DISTRO_INSTALLSCRIPT_ARCH_FILENAME=$BASE_DISTRO_INSTALL_SCRIPT_FILE" >> $PROJ_TMP/.env
    source $PROJ_TMP/.env

    echo "$BASE_DISTRO_INSTALL_SCRIPT_FILE"
}

setup()
{
	## Prepare System for script use
	
	# - Install Dependencies
	for pkg in ${dependencies[@]}; do
        $PKGLIST $pkg > /dev/null

		if [[ ! "$?" == "0" ]]; then
			echo -e "$pkg is not installed."
			$PKGINSTALL $pkg && 
				\ echo -e "Package has been installed." || 
				\ echo -e "Error installing package."
		fi
	done

	# - Create Temporary folders
	fldrs=($PROJ_SCRIPTS $PROJ_TMP)
	for fldr in ${fldrs[@]}; do
		if [[ ! -d $fldr ]]; then
			# Directory Not Found
			$MKDIR $fldr
        fi
	done
}

configure()
{
	## Configures all configurable and customizable files
	$EDITOR $BASE_DISTRO_INSTALL_SCRIPT_PATH/$BASE_DISTRO_INSTALL_SCRIPT_FILE
}

download()
{
    BASE_DISTRO_INSTALL_SCRIPT_FILE=$DISTRO_INSTALLSCRIPT_ARCH_FILENAME

    if [[ "$BASE_DISTRO_INSTALL_SCRIPT_FILE" == "" ]]; then
        BASE_DISTRO_INSTALL_SCRIPT_FILE=$(select_script)
    fi

	## Download the script/files
	echo -e "(S) Downloading scripts/files"

	echo -e "(+) Downloading Base Install Script : $BASE_DISTRO_INSTALL_SCRIPT_FILE"
	$CURL -L $BASE_DISTRO_INSTALL_SCRIPT_PATH/$BASE_DISTRO_INSTALL_SCRIPT_FILE -o $PROJ_SCRIPTS/$BASE_DISTRO_INSTALL_SCRIPT_FILE
	
	echo -e "(D) Download complete."
}

prepare_all()
{
    : " 
    Automate preparation and setup of all files required
    "
    echo -e "(S) Starting Distro install script preparation..."

    echo ""

    echo -e "(+) Checking System Information..."
    checksysinfo 

    echo ""

    echo -e "(+) Checking Dependencies..."
    checkdependencies 

    echo ""

    echo -e "(+) Running Setup process..."
    setup 

    echo ""

    echo -e "Downloading Necessary Files..."
    download 

    echo ""

    echo -e "Starting configuration for install script"
    configure

    echo "" 

    echo -e "(D) Download complete."
}

testinstall()
{
	## Run the installation test process for the scripts (This will not run the commands, just to debug and view)
	echo -e "(S) Starting test install..."

    echo ""

    if [[ "$BASE_DISTRO_INSTALL_SCRIPT_FILE" == "" ]]; then
        echo -e "Install Script file has not been decided yet, please run './install download' to select a script to use before proceeding"
	else
        ./$PROJ_SCRIPTS/$BASE_DISTRO_INSTALL_SCRIPT_FILE
    fi

    echo ""

	echo -e "(D) Test install end."
}

install()
{
	## Start the installation process for the scripts
	echo -e "(S) Starting installation script..."
	
    echo ""

    if [[ "$BASE_DISTRO_INSTALL_SCRIPT_FILE" == "" ]]; then
        echo -e "Install Script file has not been decided yet, please run './install download' to select a script to use before proceeding"
    else
        ./$PROJ_SCRIPTS/$BASE_DISTRO_INSTALL_SCRIPT_FILE RELEASE
    fi

    echo ""

	echo -e "(D) Installation script end."
}

clean()
{
	## Removes all temporary files
	echo -e "(S) Starting cleaning"

	echo -e "(-) Deleting $PROJ_FLDR"
	rm -r $PROJ_FLDR && \
		echo -e "(+) $PROJ_FLDR deleted." || \
		echo -e "(+) Error deleting $PROJ_FLDR"
	echo -e "(D) Delete end."
}

help()
{
	## Prints this help menu
    echo -e "Help:"
    for opt in "${!help_opts[@]}"; do
        opt_msg="${help_opts[$opt]}"

        Format "$opt : $opt_msg"
    done
}

main()
{
    argv=($@)
    argc="${#argv[@]}"

    if [[ "$argc" == "0" ]]; then
        help
    else
        for arg in "${argv[@]}"; do
            "$arg"
        done
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main $@
fi
